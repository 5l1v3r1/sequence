// Copyright (c) 2014 Dataence, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is automatically generated by 'gentokens.go' using 'go generate',
// and MUST not be modified. The 'go generate' line is in sequence.go.
// This file is generated on 2015-02-23 15:14:04.593505685 -0800 PST.

package sequence

import "fmt"

// Token is a piece of information extracted from a log message. The Scanner will do
// its best to determine the TokenType which could be a time stamp, IPv4 or IPv6
// address, a URL, a mac address, an integer or a floating point number. In addition,
// if the Scanner finds a token that's surrounded by %, e.g., %srcuser%, it will
// try to determine the correct field type the token represents.
type Token struct {
	Type  TokenType // Type is the type of token the Value represents.
	Field FieldType // Field determines which field the Value should be.
	Value string    // Value is the extracted string from the log message.

	isValue bool // Is this token a key in k=v pair
	isKey   bool // Is this token a value in k=v pair
}

func (this Token) String() string {
	return fmt.Sprintf("{ Field=%q, Type=%q, Value=%q, isKey=%t, isValue=%t }", this.Field, this.Type, this.Value, this.isKey, this.isValue)
}

type (
	// FieldType is the semantic representation of a token.
	FieldType int

	// Tokentype is the lexical representation of a token.
	TokenType int
)

const (
	metaMore = '+'
	metaRest = '-'
)

const (
	partialMatchWeight = 1
	fullMatchWeight    = 2

	FieldTypesCount = int(field__END__) + 1
	TokenTypesCount = int(token__END__) + 1
	allTypesCount   = FieldTypesCount + TokenTypesCount
)

const (
	TokenUnknown   TokenType = iota // Unknown token
	TokenLiteral                    // Token is a fixed literal
	TokenTime                       // Token is a timestamp, in the format listed in TimeFormats
	TokenIPv4                       // Token is an IPv4 address, in the form of a.b.c.d
	TokenIPv6                       // Token is an IPv6 address, not currently supported
	TokenInteger                    // Token is an integer number
	TokenFloat                      // Token is a floating point number
	TokenURI                        // Token is an URL, in the form of http://... or https://...
	TokenMac                        // Token is a mac address
	TokenString                     // Token is a string that reprensents multiple possible values
	token__END__                    // All field types must be inserted before this one
	token__host__                   // Token is a host name
	token__email__                  // Token is an email address
)

const (
	FieldUnknown    FieldType = iota // Unknown field type
	FieldMsgId                       // The message identifier
	FieldMsgTime                     // The timestamp that’s part of the log message
	FieldSeverity                    // The severity of the event, e.g., Emergency, …
	FieldPriority                    // The pirority of the event
	FieldAppHost                     // The hostname of the host where the log message is generated
	FieldAppIPv4                     // The IP address of the host where the application that generated the log message is running on.
	FieldAppVendor                   // The type of application that generated the log message, e.g., Cisco, ISS
	FieldAppName                     // The name of the application that generated the log message, e.g., asa, snort, sshd
	FieldSrcDomain                   // The domain name of the initiator of the event, usually a Windows domain
	FieldSrcZone                     // The originating zone
	FieldSrcHost                     // The hostname of the originator of the event or connection.
	FieldSrcIPv4                     // The IPv4 address of the originator of the event or connection.
	FieldSrcIPv4NAT                  // The natted (network address translation) IP of the originator of the event or connection.
	FieldSrcIPv6                     // The IPv6 address of the originator of the event or connection.
	FieldSrcPort                     // The port number of the originating connection.
	FieldSrcPortNAT                  // The natted port number of the originating connection.
	FieldSrcMac                      // The mac address of the host that originated the connection.
	FieldSrcUser                     // The user that originated the session.
	FieldSrcUid                      // The user id that originated the session.
	FieldSrcGroup                    // The group that originated the session.
	FieldSrcGid                      // The group id that originated the session.
	FieldSrcEmail                    // The originating email address
	FieldDstDomain                   // The domain name of the destination of the event, usually a Windows domain
	FieldDstZone                     // The destination zone
	FieldDstHost                     // The hostname of the destination of the event or connection.
	FieldDstIPv4                     // The IPv4 address of the destination of the event or connection.
	FieldDstIPv4NAT                  // The natted (network address translation) IP of the destination of the event or connection.
	FieldDstIPv6                     // The IPv6 address of the destination of the event or connection.
	FieldDstPort                     // The destination port number of the connection.
	FieldDstPortNAT                  // The natted destination port number of the connection.
	FieldDstMac                      // The mac address of the destination host.
	FieldDstUser                     // The user at the destination.
	FieldDstUid                      // The user id that originated the session.
	FieldDstGroup                    // The group that originated the session.
	FieldDstGid                      // The group id that originated the session.
	FieldDstEmail                    // The destination email address
	FieldProtocol                    // The protocol, such as TCP, UDP, ICMP, of the connection
	FieldInIface                     // The incoming interface
	FieldOutIface                    // The outgoing interface
	FieldPolicyID                    // The policy ID
	FieldSessionID                   // The session or process ID
	FieldObject                      // The object affected.
	FieldAction                      // The action taken
	FieldCommand                     // The command executed
	FieldMethod                      // The method in which the action was taken, for example, public key or password for ssh
	FieldStatus                      // The status of the action taken
	FieldReason                      // The reason for the action taken or the status returned
	FieldBytesRecv                   // The number of bytes received
	FieldBytesSent                   // The number of bytes sent
	FieldPktsRecv                    // The number of packets received
	FieldPktsSent                    // The number of packets sent
	FieldDuration                    // The duration of the session
	field__END__                     // All field types must be inserted before this one
)

var (
	tokens = []struct {
		label string
	}{
		{"%tunknown%"},
		{"%literal%"},
		{"%time%"},
		{"%ipv4%"},
		{"%ipv6%"},
		{"%integer%"},
		{"%float%"},
		{"%url%"},
		{"%mac%"},
		{"%string%"},
		{"token__END__"},
		{"token__host__"},
		{"token__email__"},
	}

	fields = []struct {
		label string
		ttype TokenType
	}{
		{"%funknown%", TokenString},
		{"%msgid%", TokenString},
		{"%msgtime%", TokenTime},
		{"%severity%", TokenInteger},
		{"%priority%", TokenInteger},
		{"%apphost%", TokenString},
		{"%appipv4%", TokenIPv4},
		{"%appvendor%", TokenString},
		{"%appname%", TokenString},
		{"%srcdomain%", TokenString},
		{"%srczone%", TokenString},
		{"%srchost%", TokenString},
		{"%srcipv4%", TokenIPv4},
		{"%srcipv4nat%", TokenIPv4},
		{"%srcipv6%", TokenIPv6},
		{"%srcport%", TokenInteger},
		{"%srcportnat%", TokenInteger},
		{"%srcmac%", TokenMac},
		{"%srcuser%", TokenString},
		{"%srcuid%", TokenInteger},
		{"%srcgroup%", TokenString},
		{"%srcgid%", TokenInteger},
		{"%srcemail%", TokenString},
		{"%dstdomain%", TokenString},
		{"%dstzone%", TokenString},
		{"%dsthost%", TokenString},
		{"%dstipv4%", TokenIPv4},
		{"%dstipv4nat%", TokenIPv4},
		{"%dstipv6%", TokenIPv6},
		{"%dstport%", TokenInteger},
		{"%dstportnat%", TokenInteger},
		{"%dstmac%", TokenMac},
		{"%dstuser%", TokenString},
		{"%dstuid%", TokenInteger},
		{"%dstgroup%", TokenString},
		{"%dstgid%", TokenInteger},
		{"%dstemail%", TokenString},
		{"%protocol%", TokenString},
		{"%iniface%", TokenString},
		{"%outiface%", TokenString},
		{"%policyid%", TokenInteger},
		{"%sessionid%", TokenInteger},
		{"%object%", TokenString},
		{"%action%", TokenString},
		{"%command%", TokenString},
		{"%method%", TokenString},
		{"%status%", TokenString},
		{"%reason%", TokenString},
		{"%bytesrecv%", TokenInteger},
		{"%bytessent%", TokenInteger},
		{"%pktsrecv%", TokenInteger},
		{"%pktssent%", TokenInteger},
		{"%duration%", TokenInteger},
		{"field__END__", TokenString},
	}
)

func (this TokenType) String() string {
	return tokens[this].label
}

func (this FieldType) String() string {
	return fields[this].label
}

func name2TokenType(s string) TokenType {
	switch s {
	case "%tunknown%":
		return TokenUnknown
	case "%literal%":
		return TokenLiteral
	case "%time%":
		return TokenTime
	case "%ipv4%":
		return TokenIPv4
	case "%ipv6%":
		return TokenIPv6
	case "%integer%":
		return TokenInteger
	case "%float%":
		return TokenFloat
	case "%url%":
		return TokenURI
	case "%mac%":
		return TokenMac
	case "%string%":
		return TokenString
	case "token__END__":
		return token__END__
	case "token__host__":
		return token__host__
	case "token__email__":
		return token__email__
	}

	return TokenUnknown
}

func name2FieldType(s string) FieldType {
	switch s {
	case "%funknown%":
		return FieldUnknown
	case "%msgid%":
		return FieldMsgId
	case "%msgtime%":
		return FieldMsgTime
	case "%severity%":
		return FieldSeverity
	case "%priority%":
		return FieldPriority
	case "%apphost%":
		return FieldAppHost
	case "%appipv4%":
		return FieldAppIPv4
	case "%appvendor%":
		return FieldAppVendor
	case "%appname%":
		return FieldAppName
	case "%srcdomain%":
		return FieldSrcDomain
	case "%srczone%":
		return FieldSrcZone
	case "%srchost%":
		return FieldSrcHost
	case "%srcipv4%":
		return FieldSrcIPv4
	case "%srcipv4nat%":
		return FieldSrcIPv4NAT
	case "%srcipv6%":
		return FieldSrcIPv6
	case "%srcport%":
		return FieldSrcPort
	case "%srcportnat%":
		return FieldSrcPortNAT
	case "%srcmac%":
		return FieldSrcMac
	case "%srcuser%":
		return FieldSrcUser
	case "%srcuid%":
		return FieldSrcUid
	case "%srcgroup%":
		return FieldSrcGroup
	case "%srcgid%":
		return FieldSrcGid
	case "%srcemail%":
		return FieldSrcEmail
	case "%dstdomain%":
		return FieldDstDomain
	case "%dstzone%":
		return FieldDstZone
	case "%dsthost%":
		return FieldDstHost
	case "%dstipv4%":
		return FieldDstIPv4
	case "%dstipv4nat%":
		return FieldDstIPv4NAT
	case "%dstipv6%":
		return FieldDstIPv6
	case "%dstport%":
		return FieldDstPort
	case "%dstportnat%":
		return FieldDstPortNAT
	case "%dstmac%":
		return FieldDstMac
	case "%dstuser%":
		return FieldDstUser
	case "%dstuid%":
		return FieldDstUid
	case "%dstgroup%":
		return FieldDstGroup
	case "%dstgid%":
		return FieldDstGid
	case "%dstemail%":
		return FieldDstEmail
	case "%protocol%":
		return FieldProtocol
	case "%iniface%":
		return FieldInIface
	case "%outiface%":
		return FieldOutIface
	case "%policyid%":
		return FieldPolicyID
	case "%sessionid%":
		return FieldSessionID
	case "%object%":
		return FieldObject
	case "%action%":
		return FieldAction
	case "%command%":
		return FieldCommand
	case "%method%":
		return FieldMethod
	case "%status%":
		return FieldStatus
	case "%reason%":
		return FieldReason
	case "%bytesrecv%":
		return FieldBytesRecv
	case "%bytessent%":
		return FieldBytesSent
	case "%pktsrecv%":
		return FieldPktsRecv
	case "%pktssent%":
		return FieldPktsSent
	case "%duration%":
		return FieldDuration
	case "field__END__":
		return field__END__
	}

	return FieldUnknown
}

func (this FieldType) TokenType() TokenType {
	return fields[this].ttype
}
